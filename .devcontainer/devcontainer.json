// For format details, see https://aka.ms/vscode-remote/devcontainer.json or the definition README at
// https://github.com/microsoft/vscode-dev-containers/tree/master/containers/docker-existing-dockerfile
{
	"name": "myproject",
	"dockerComposeFile": [
		"../docker-compose.yml"
	],
	"service": "workspace",
	"runServices": [
		"workspace"
	],
	"workspaceFolder": "/workspace",
	// Uncomment the next line to have VS Code connect as an existing non-root user in the container. 
	// On Linux, by default, the container user's UID/GID will be updated to match your local user. See
	// https://aka.ms/vscode-remote/containers/non-root for details on adding a non-root user if none exist.
	"remoteUser": "vscode",
	// Use 'settings' to set *default* container specific settings.json values on container create. 
	// You can edit these settings after create using File > Preferences > Settings > Remote.
	"settings": {
		// This will ignore your local shell user setting for Linux since shells like zsh are typically 
		// not in base container images. You can also update this to an specific shell to ensure VS Code 
		// uses the right one for terminals and tasks. For example, /bin/bash (or /bin/ash for Alpine).
		"terminal.integrated.shell.linux": "/bin/bash",
		"C_Cpp.clang_format_path": "/usr/bin/clang-format",
		"python.pythonPath": "/bin/python3"
	},
	// Use 'appPort' to create a container with published ports. If the port isn't working, be sure
	// your server accepts connections from all interfaces (0.0.0.0 or '*'), not just localhost.
	// "appPort": [],
	// Uncomment the next line to run commands after the container is created - for example installing git.
	// "postCreateCommand": "",
	// Add the IDs of extensions you want installed when the container is created in the array below.
	"extensions": [
		"ms-vscode.cpptools"
	],
	"remoteEnv": {
		"WORKSPACE_ROOT": "/workspace"
	}
}
